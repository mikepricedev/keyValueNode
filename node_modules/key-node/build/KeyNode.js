"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
"use strict";
const KeyNodeError_1 = require("./KeyNodeError");
exports.ROOT_KEYS = Symbol('Root Keys Lib');
const CHILDREN = Symbol('Child Keys Lib');
const DEPTH = Symbol('Depth Cache');
const PARENTS = Symbol('Parents Cache');
class BaseKeyNode extends String {
    constructor(key, parent) {
        super(key);
        this[_a] = new Map();
        const keyLiteral = this.toString();
        const parentIsRootKeyLib = parent instanceof Map;
        const siblingLib = parentIsRootKeyLib ? parent : parent[CHILDREN];
        if (siblingLib.has(keyLiteral)) {
            throw new KeyNodeError_1.default(`'${keyLiteral}' already exists in sibling set.` +
                `  Sibling key literals must be unique.`, siblingLib.get(keyLiteral));
        }
        siblingLib.set(keyLiteral, this);
        if (parentIsRootKeyLib) {
            this[exports.ROOT_KEYS] = siblingLib;
            this.PARENT = null;
            this.IS_ROOT_KEY = true;
        }
        else {
            this.PARENT = parent;
            this.IS_ROOT_KEY = false;
        }
    }
    //Accessors 
    get isTerminalKey() {
        return this[CHILDREN].size === 0;
    }
    get numChildren() {
        return this[CHILDREN].size;
    }
    get depth() {
        //Get and cache depth; lazy
        if (this[DEPTH] === undefined) {
            let depth = 0;
            for (const pKey of this.parents()) {
                depth++;
            }
            this[DEPTH] = depth;
        }
        return this[DEPTH];
    }
    get [(_a = CHILDREN, Symbol.toStringTag)]() {
        return this.constructor.name;
    }
    //Mehtods
    hasChild(childKey) {
        return this[CHILDREN].has(childKey);
    }
    getChild(childKey) {
        const children = this[CHILDREN];
        return children.has(childKey) ? children.get(childKey) : null;
    }
    hasSibling(siblingKey) {
        const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
        return sliblingKeyLib.has(siblingKey) ?
            sliblingKeyLib.get(siblingKey) !== this : false;
    }
    getSibling(siblingKey) {
        if (this.hasSibling(siblingKey)) {
            const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
            return sliblingKeyLib.get(siblingKey);
        }
        ;
        return null;
    }
    children() {
        //NOTE: Not cached b/c can increase.
        return this[CHILDREN].values();
    }
    parents() {
        //Get and cache parents; lazy
        if (this[PARENTS] === undefined) {
            let pKeys = new Set();
            let pKey = this.PARENT;
            while (pKey !== null) {
                pKeys.add(pKey);
                pKey = pKey.PARENT;
            }
            this[PARENTS] = pKeys;
        }
        return this[PARENTS].values();
    }
    *siblings() {
        //NOTE: Not cached b/c can increase.
        const siblingsIter = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS].values() : this.PARENT.children();
        for (const sib of siblingsIter) {
            if (sib !== this) {
                yield sib;
            }
        }
    }
}
exports.BaseKeyNode = BaseKeyNode;
class KeyNode extends BaseKeyNode {
}
exports.KeyNode = KeyNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5Tm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpREFBMEM7QUFFN0IsUUFBQSxTQUFTLEdBQWlCLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMvRCxNQUFNLFFBQVEsR0FBaUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDeEQsTUFBTSxLQUFLLEdBQWlCLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNsRCxNQUFNLE9BQU8sR0FBaUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXRELGlCQUFtRSxTQUFRLE1BQU07SUFVL0UsWUFBWSxHQUFVLEVBQUUsTUFBaUM7UUFFdkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBTkksUUFBVSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO1FBUXBELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sWUFBWSxHQUFHLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQXFCLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRixJQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUM7WUFFNUIsTUFBTSxJQUFJLHNCQUFZLENBQVEsSUFBSSxVQUFVLGtDQUFrQztnQkFDNUUsd0NBQXdDLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBRXpFO1FBRUQsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQU8sSUFBSSxDQUFDLENBQUM7UUFFdEMsSUFBRyxrQkFBa0IsRUFBQztZQUVwQixJQUFJLENBQUMsaUJBQVMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztZQUM3QixJQUFJLENBQUMsTUFBTSxHQUFH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
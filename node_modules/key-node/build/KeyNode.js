"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
"use strict";
const path_notation_1 = require("path-notation");
const KeyNodeError_1 = require("./KeyNodeError");
exports.ROOT_KEYS = Symbol('ROOT_KEYS');
const ROOT_KEY = Symbol('ROOT_KEY');
const CHILDREN = Symbol('CHILDREN');
const DEPTH = Symbol('DEPTH');
const PATH_NOTATION = Symbol('PATH_NOTATION');
class BaseKeyNode extends String {
    constructor(key, parent) {
        super(key);
        this[_a] = new Map();
        const keyLiteral = this.toString();
        const parentIsRootKeyLib = parent instanceof Map;
        const siblingLib = parentIsRootKeyLib ? parent : parent[CHILDREN];
        if (siblingLib.has(keyLiteral)) {
            throw new KeyNodeError_1.default(`'${keyLiteral}' already exists in sibling set.` +
                `  Sibling key literals must be unique.`, siblingLib.get(keyLiteral));
        }
        siblingLib.set(keyLiteral, this);
        if (parentIsRootKeyLib) {
            this[exports.ROOT_KEYS] = siblingLib;
            this.PARENT = null;
            this.IS_ROOT_KEY = true;
        }
        else {
            this.PARENT = parent;
            this.IS_ROOT_KEY = false;
        }
    }
    //Accessors
    get rootKey() {
        //Lazy cache
        if (this[ROOT_KEY] === undefined) {
            let keyNode = this;
            //Get and cache parents; lazy
            for (keyNode of this.parents())
                ;
            this[ROOT_KEY] = keyNode;
        }
        return this[ROOT_KEY];
    }
    ;
    get isTerminalKey() {
        return this[CHILDREN].size === 0;
    }
    get numChildren() {
        return this[CHILDREN].size;
    }
    get depth() {
        //Lazy cache
        if (this[DEPTH] === undefined) {
            let depth = 0;
            //Get and cache parents; lazy
            for (const pKey of this.parents()) {
                depth++;
            }
            this[DEPTH] = depth;
        }
        return this[DEPTH];
    }
    get pathNotation() {
        //Lazy cache
        if (this[PATH_NOTATION] === undefined) {
            const pkeys = [this];
            for (const pKey of this.parents()) {
                pkeys.unshift(pKey);
            }
            this[PATH_NOTATION] = new path_notation_1.default(pkeys);
        }
        return this[PATH_NOTATION];
    }
    get [(_a = CHILDREN, Symbol.toStringTag)]() {
        return this.constructor.name;
    }
    //Mehtods
    hasChild(childKey) {
        const childKeyLiteral = childKey.toString();
        return this[CHILDREN].has(childKeyLiteral);
    }
    getChild(childKey) {
        const childKeyLiteral = childKey.toString();
        const children = this[CHILDREN];
        return children.has(childKeyLiteral) ? children.get(childKeyLiteral) : null;
    }
    hasSibling(siblingKey) {
        const siblingKeyLiteral = siblingKey.toString();
        if (siblingKeyLiteral === this.toString()) {
            return false;
        }
        const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
        return sliblingKeyLib.has(siblingKeyLiteral);
    }
    getSibling(siblingKey) {
        const siblingKeyLiteral = siblingKey.toString();
        if (siblingKeyLiteral === this.toString()) {
            return null;
        }
        const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
        return sliblingKeyLib.has(siblingKeyLiteral) ? sliblingKeyLib.get(siblingKeyLiteral) : null;
    }
    children() {
        return this[CHILDREN].values();
    }
    *parents() {
        let pKey = this.PARENT;
        while (pKey !== null) {
            yield pKey;
            pKey = pKey.PARENT;
        }
    }
    *siblings() {
        const siblingsIter = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS].values() : this.PARENT.children();
        for (const sib of siblingsIter) {
            if (sib !== this) {
                yield sib;
            }
        }
    }
}
exports.BaseKeyNode = BaseKeyNode;
class KeyNode extends BaseKeyNode {
}
exports.KeyNode = KeyNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5Tm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpREFBeUM7QUFDekMsaURBQTBDO0FBRTdCLFFBQUEsU0FBUyxHQUFpQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0QsTUFBTSxRQUFRLEdBQWlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsRCxNQUFNLFFBQVEsR0FBaUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sS0FBSyxHQUFpQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsTUFBTSxhQUFhLEdBQWlCLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUU1RCxpQkFBbUUsU0FBUSxNQUFNO0lBVy9FLFlBQVksR0FBVSxFQUFFLE1BQWlDO1FBRXZELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQU5JLFFBQVUsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQztRQVFwRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLFlBQVksR0FBRyxDQUFDO1FBQ2pELE1BQU0sVUFBVSxHQUFxQixrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEYsSUFBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBRTVCLE1BQU0sSUFBSSxzQkFBWSxDQUFRLElBQUksVUFBVSxrQ0FBa0M7Z0JBQzVFLHdDQUF3QyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUV6RTtRQUVELFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFPLElBQUksQ0FBQyxDQUFDO1FBRXRDLElBQUcsa0JBQWtCLEVBQUM7WUFFcEIsSUFB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
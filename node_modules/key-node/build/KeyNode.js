"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
"use strict";
const path_notation_1 = require("path-notation");
const KeyNodeError_1 = require("./KeyNodeError");
exports.ROOT_KEYS = Symbol('ROOT_KEYS');
const CHILDREN = Symbol('CHILDREN');
const DEPTH = Symbol('DEPTH');
const PARENTS = Symbol('PARENTS');
const PATH_NOTATION = Symbol('PATH_NOTATION');
class BaseKeyNode extends String {
    constructor(key, parent) {
        super(key);
        this[_a] = new Map();
        const keyLiteral = this.toString();
        const parentIsRootKeyLib = parent instanceof Map;
        const siblingLib = parentIsRootKeyLib ? parent : parent[CHILDREN];
        if (siblingLib.has(keyLiteral)) {
            throw new KeyNodeError_1.default(`'${keyLiteral}' already exists in sibling set.` +
                `  Sibling key literals must be unique.`, siblingLib.get(keyLiteral));
        }
        siblingLib.set(keyLiteral, this);
        if (parentIsRootKeyLib) {
            this[exports.ROOT_KEYS] = siblingLib;
            this.PARENT = null;
            this.IS_ROOT_KEY = true;
        }
        else {
            this.PARENT = parent;
            this.IS_ROOT_KEY = false;
        }
    }
    //Accessors 
    get isTerminalKey() {
        return this[CHILDREN].size === 0;
    }
    get numChildren() {
        return this[CHILDREN].size;
    }
    get depth() {
        //Get and cache depth; lazy
        if (this[DEPTH] === undefined) {
            let depth = 0;
            for (const pKey of this.parents()) {
                depth++;
            }
            this[DEPTH] = depth;
        }
        return this[DEPTH];
    }
    get pathNotation() {
        if (this[PATH_NOTATION] === undefined) {
            const pkeys = [this];
            let pKey = this.PARENT;
            while (pKey !== null) {
                pkeys.unshift(pKey);
                pKey = pKey.PARENT;
            }
            this[PATH_NOTATION] = new path_notation_1.default(pkeys);
        }
        return this[PATH_NOTATION];
    }
    get [(_a = CHILDREN, Symbol.toStringTag)]() {
        return this.constructor.name;
    }
    //Mehtods
    hasChild(childKey) {
        return this[CHILDREN].has(childKey);
    }
    getChild(childKey) {
        const children = this[CHILDREN];
        return children.has(childKey) ? children.get(childKey) : null;
    }
    hasSibling(siblingKey) {
        const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
        return sliblingKeyLib.has(siblingKey) ?
            sliblingKeyLib.get(siblingKey) !== this : false;
    }
    getSibling(siblingKey) {
        if (this.hasSibling(siblingKey)) {
            const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
            return sliblingKeyLib.get(siblingKey);
        }
        ;
        return null;
    }
    children() {
        //NOTE: Not cached b/c can increase.
        return this[CHILDREN].values();
    }
    parents() {
        //Get and cache parents; lazy
        if (this[PARENTS] === undefined) {
            let pKeys = new Set();
            let pKey = this.PARENT;
            while (pKey !== null) {
                pKeys.add(pKey);
                pKey = pKey.PARENT;
            }
            this[PARENTS] = pKeys;
        }
        return this[PARENTS].values();
    }
    *siblings() {
        //NOTE: Not cached b/c can increase.
        const siblingsIter = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS].values() : this.PARENT.children();
        for (const sib of siblingsIter) {
            if (sib !== this) {
                yield sib;
            }
        }
    }
}
exports.BaseKeyNode = BaseKeyNode;
class KeyNode extends BaseKeyNode {
}
exports.KeyNode = KeyNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5Tm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpREFBeUM7QUFDekMsaURBQTBDO0FBRTdCLFFBQUEsU0FBUyxHQUFpQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0QsTUFBTSxRQUFRLEdBQWlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsRCxNQUFNLEtBQUssR0FBaUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLE1BQU0sT0FBTyxHQUFpQixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEQsTUFBTSxhQUFhLEdBQWlCLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUU1RCxpQkFBbUUsU0FBUSxNQUFNO0lBVy9FLFlBQVksR0FBVSxFQUFFLE1BQWlDO1FBRXZELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQVBJLFFBQVUsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQztRQVNwRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLFlBQVksR0FBRyxDQUFDO1FBQ2pELE1BQU0sVUFBVSxHQUFxQixrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEYsSUFBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBRTVCLE1BQU0sSUFBSSxzQkFBWSxDQUFRLElBQUksVUFBVSxrQ0FBa0M7Z0JBQzVFLHdDQUF3QyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUV6RTtRQUVELFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFPLElBQUksQ0FBQyxDQUFDO1FBRXRDLElBQUcsa0JBQWtCLEVBQUM7WUFFcEIsSUFB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
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
"use strict";
const path_notation_1 = require("path-notation");
const KeyNodeError_1 = require("./KeyNodeError");
exports.ROOT_KEYS = Symbol('ROOT_KEYS');
const ROOT_KEY = Symbol('ROOT_KEY');
const CHILDREN = Symbol('CHILDREN');
const DEPTH = Symbol('DEPTH');
const PATH_NOTATION = Symbol('PATH_NOTATION');
class BaseKeyNode extends String {
    constructor(key, parent) {
        super(key);
        this[_a] = new Map();
        const keyLiteral = this.toString();
        const parentIsRootKeyLib = parent instanceof Map;
        const siblingLib = parentIsRootKeyLib ? parent : parent[CHILDREN];
        if (siblingLib.has(keyLiteral)) {
            throw new KeyNodeError_1.default(`'${keyLiteral}' already exists in sibling set.` +
                `  Sibling key literals must be unique.`, siblingLib.get(keyLiteral));
        }
        siblingLib.set(keyLiteral, this);
        if (parentIsRootKeyLib) {
            this[exports.ROOT_KEYS] = siblingLib;
            this.PARENT = null;
            this.IS_ROOT_KEY = true;
            this[DEPTH] = 0;
        }
        else {
            this.PARENT = parent;
            this.IS_ROOT_KEY = false;
            this[DEPTH] = parent.depth + 1;
        }
    }
    //Accessors
    get rootKey() {
        //Lazy cache
        if (this[ROOT_KEY] === undefined) {
            this[ROOT_KEY] = this.pathToKey().next().value;
        }
        return this[ROOT_KEY];
    }
    ;
    get isTerminalKey() {
        return this[CHILDREN].size === 0;
    }
    get numChildren() {
        return this[CHILDREN].size;
    }
    get depth() {
        return this[DEPTH];
    }
    get pathNotation() {
        //Lazy cache
        if (this[PATH_NOTATION] === undefined) {
            this[PATH_NOTATION] = new path_notation_1.default(this.pathToKey());
        }
        return this[PATH_NOTATION];
    }
    get [(_a = CHILDREN, Symbol.toStringTag)]() {
        return this.constructor.name;
    }
    //Mehtods
    hasChild(childKey) {
        const childKeyLiteral = childKey.toString();
        return this[CHILDREN].has(childKeyLiteral);
    }
    getChild(childKey) {
        const childKeyLiteral = childKey.toString();
        const children = this[CHILDREN];
        return children.has(childKeyLiteral) ? children.get(childKeyLiteral) : null;
    }
    hasSibling(siblingKey) {
        const siblingKeyLiteral = siblingKey.toString();
        if (siblingKeyLiteral === this.toString()) {
            return false;
        }
        const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
        return sliblingKeyLib.has(siblingKeyLiteral);
    }
    getSibling(siblingKey) {
        const siblingKeyLiteral = siblingKey.toString();
        if (siblingKeyLiteral === this.toString()) {
            return null;
        }
        const sliblingKeyLib = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS] : this.PARENT[CHILDREN];
        return sliblingKeyLib.has(siblingKeyLiteral) ? sliblingKeyLib.get(siblingKeyLiteral) : null;
    }
    children() {
        return this[CHILDREN].values();
    }
    *parents() {
        let pKey = this.PARENT;
        while (pKey !== null) {
            yield pKey;
            pKey = pKey.PARENT;
        }
    }
    *pathToKey(inlcudeSelf = true) {
        if (this.IS_ROOT_KEY) {
            if (inlcudeSelf) {
                yield this;
            }
            return;
        }
        yield* this.PARENT.pathToKey(true);
        if (inlcudeSelf) {
            yield this;
        }
    }
    *siblings() {
        const siblingsIter = this.IS_ROOT_KEY ? this[exports.ROOT_KEYS].values() : this.PARENT.children();
        for (const sib of siblingsIter) {
            if (sib !== this) {
                yield sib;
            }
        }
    }
}
exports.BaseKeyNode = BaseKeyNode;
class KeyNode extends BaseKeyNode {
}
exports.KeyNode = KeyNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5Tm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpREFBeUM7QUFDekMsaURBQTBDO0FBRTdCLFFBQUEsU0FBUyxHQUFpQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0QsTUFBTSxRQUFRLEdBQWlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsRCxNQUFNLFFBQVEsR0FBaUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sS0FBSyxHQUFpQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsTUFBTSxhQUFhLEdBQWlCLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUU1RCxpQkFBbUUsU0FBUSxNQUFNO0lBVy9FLFlBQVksR0FBVSxFQUFFLE1BQWlDO1FBRXZELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQU5JLFFBQVUsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQztRQVFwRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLFlBQVksR0FBRyxDQUFDO1FBQ2pELE1BQU0sVUFBVSxHQUFxQixrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEYsSUFBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBRTVCLE1BQU0sSUFBSSxzQkFBWSxDQUFRLElBQUksVUFBVSxrQ0FBa0M7Z0JBQzVFLHdDQUF3QyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUV6RTtRQUVELFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFPLElBQUksQ0FBQyxDQUFDO1FBRXRDLElBQUcsa0JBQWtCLEVBQUM7WUFFcEIsSUFB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
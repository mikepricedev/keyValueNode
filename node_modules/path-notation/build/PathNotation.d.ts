declare const KEYS_KEY: unique symbol;
/**
  @description Dot-notation based path string which yields key literals, allows for the inclusion of keys with "." characters, and provides node meta data and other useful utilities.
  @extends String
*/
export default class PathNotation extends String {
    private readonly [KEYS_KEY];
    /**
      @description Creates a PathNotation instance.
      @arg {string | number | String | Iterable<string | number | String>} pathNotationOrKey -
        Key in path notation e.g. "foo.bar['baz.qux']" or a single path key.
      @arg {...(string | number | String)} [keys] - Optional child path keys.
    */
    constructor(pathNotationOrKey: string | number | String | Iterable<string | number | String>, ...keys: (string | number | String)[]);
    /**
      @description Number of key literals in path.
      @type {number}
    */
    readonly numKeys: number;
    /**
      @description Zero based node depth of terminal key in path.
      @type {number}
    */
    readonly depth: number;
    /**
      @description First key literal in path.
      @type {string}
    */
    readonly rootKey: string;
    /**
      @description Last key literal in path.
      @type {string}
    */
    readonly terminalKey: string;
    readonly [Symbol.toStringTag]: string;
    /**
      @description Yields key literals from path.
      @generator
      @yields {string} The next key litreral in path.
    */
    keys(): IterableIterator<string>;
    /**
      @description Returns parent path.
      @arg {number} keyDepth - 0 based index of parent path.  Cannot be greater than [PathNotation.depth]{@link Path#depth}.
    */
    parentPath(keyDepth: number): PathNotation;
    [Symbol.iterator](): IterableIterator<string>;
    /**
      @description Yileds key literals dot-notated path.
      @generator
      @yields {string} The next key litreral in path.
    */
    static pathNotationToKeys(path: string): IterableIterator<string>;
    /**
      @description Returns dot-notated path.
      @returns {string} Dot-notated path.
    */
    static keysToPathNotation(keys: Iterable<string>): string;
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const KEYS = Symbol();
/**
  @description Dot-notation based path string which yields key literals, allows for the inclusion of keys with "." characters, and provides node meta data and other useful utilities.
  @extends String
*/
class PathNotation extends String {
    /**
      @description Creates a PathNotation instance.
      @arg {string | number | String | Iterable<string | number | String>} pathNotationOrKey -
        Key in path notation e.g. "foo.bar['baz.qux']" or a single path key.
      @arg {...(string | number | String)} [keys] - Optional child path keys.
    */
    constructor(pathNotationOrKey, ...keys) {
        const keysToSet = [];
        switch (typeof pathNotationOrKey) {
            case 'string':
                keysToSet.push(...PathNotation.pathNotationToKeys(pathNotationOrKey));
                break;
            case 'number':
                keysToSet.push(...PathNotation.pathNotationToKeys(pathNotationOrKey.toString()));
                break;
            default:
                if (pathNotationOrKey instanceof String && !(pathNotationOrKey instanceof PathNotation)) {
                    keysToSet.push(pathNotationOrKey.toString());
                    break;
                }
                for (const keyLiteral of pathNotationOrKey) {
                    keysToSet.push(keyLiteral.toString());
                }
        }
        for (const keyLiteral of keys) {
            keysToSet.push(keyLiteral.toString());
        }
        super(PathNotation.keysToPathNotation(keysToSet));
        this[KEYS] = keysToSet;
    }
    //Accessors
    /**
      @description Number of key literals in path.
      @type {number}
    */
    get numKeys() {
        return this[KEYS].length;
    }
    /**
      @description Zero based node depth of terminal key in path.
      @type {number}
    */
    get depth() {
        return this[KEYS].length - 1;
    }
    /**
      @description First key literal in path.
      @type {string}
    */
    get rootKey() {
        return this[KEYS][0];
    }
    /**
      @description Last key literal in path.
      @type {string}
    */
    get terminalKey() {
        return this[KEYS][this.depth];
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    //Methods
    /**
      @description Yields key literals from path.
      @generator
      @yields {string} The next key litreral in path.
    */
    *keys() {
        let i = 0;
        for (let key of this[KEYS]) {
            i++;
            let remainingPath = yield key;
            while (remainingPath === true) {
                remainingPath = yield PathNotation.keysToPathNotation(this[KEYS].slice(i));
            }
        }
    }
    /**
      @description Returns parent path.
      @arg {number} keyDepth - 0 based index of parent path.  Cannot be greater than [PathNotation.depth]{@link Path#depth}.
    */
    parentPath(keyDepth) {
        const DEPTH = this.depth;
        if (keyDepth >= DEPTH) {
            throw new Error(`A parent 'PathNotation.depth' must be less than it's children 'PathNotation.depth(s)'.`);
        }
        return new PathNotation(this[KEYS].slice(0, keyDepth + 1));
    }
    *[Symbol.iterator]() {
        yield* this[KEYS];
    }
    /**
      @description Yileds key literals dot-notated path.
      @generator
      @yields {string} The next key litreral in path.
    */
    static *pathNotationToKeys(path) {
        const escapedKeys = new Map();
        //["@key"]
        path = path.replace(/\["(.+)"\]/g, (m, key) => {
            let placeHolder;
            do {
                placeHolder = `{%${Math.floor(Math.random() * 10 ** 4).toString()}%}`;
            } while (escapedKeys.has(placeHolder));
            escapedKeys.set(placeHolder, key);
            return `.${placeHolder}.`;
        });
        //['@key']
        path = path.replace(/\['(.+)'\]/g, (m, key) => {
            let placeHolder;
            do {
                placeHolder = `{%${Math.floor(Math.random() * 10 ** 4).toString()}%}`;
            } while (escapedKeys.has(placeHolder));
            escapedKeys.set(placeHolder, key);
            return `.${placeHolder}.`;
        });
        //Remove trailing '.'
        if (path.slice(-1) === '.') {
            path = path.slice(0, -1);
        }
        for (let key of path.split('.')) {
            yield escapedKeys.has(key) ? escapedKeys.get(key) : key;
        }
    }
    /**
      @description Returns dot-notated path.
      @returns {string} Dot-notated path.
    */
    static keysToPathNotation(keys) {
        let pathNotation = '';
        let lastWasBracketNotation = false;
        for (let key of keys) {
            if (key.indexOf('.') > -1) {
                pathNotation += `["${key}"]`;
                lastWasBracketNotation = true;
            }
            else if (lastWasBracketNotation) {
                pathNotation += `${key}`;
                lastWasBracketNotation = false;
            }
            else {
                pathNotation += `.${key}`;
            }
        }
        //Remove leading "."
        return pathNotation.slice(1);
    }
}
exports.default = PathNotation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aE5vdGF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1BhdGhOb3RhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sSUFBSSxHQUFpQixNQUFNLEVBQUUsQ0FBQztBQUVwQzs7O0VBR0U7QUFDRixrQkFBa0MsU0FBUSxNQUFNO0lBSTlDOzs7OztNQUtFO0lBQ0YsWUFDRSxpQkFBK0UsRUFDL0UsR0FBRyxJQUFpQztRQUdwQyxNQUFNLFNBQVMsR0FBWSxFQUFFLENBQUM7UUFFOUIsUUFBTyxPQUFPLGlCQUFpQixFQUFDO1lBRTlCLEtBQUssUUFBUTtnQkFFWCxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLGtCQUFrQixDQUFTLGlCQUFpQixDQUFDLENBQUMsQ0FBQztnQkFDOUUsTUFBTTtZQUVSLEtBQUssUUFBUTtnQkFFWCxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDakYsTUFBTTtZQUVSO2dCQUVFLElBQUcsaUJBQWlCLFlBQVksTUFBTSxJQUFJLENBQUMsQ0FBQyxpQkFBaUIsWUFBWSxZQUFZLENBQUMsRUFBQztvQkFFckYsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO29CQUM3QyxNQUFNO2lCQUVQO2dCQUVELEtBQUksTUFBTSxVQUFVLElBQStCLGlCQUFpQixFQUFDO29CQUVuRSxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2lCQUV2QztTQUVKO1FBRUQsS0FBSSxNQUFNLFVBQVUsSUFBSSxJQUFJLEVBQUM7WUFFM0IsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUV2QztRQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsa0JB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
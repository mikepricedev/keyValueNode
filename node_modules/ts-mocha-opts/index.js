"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const readline = require("readline");
const mergewith = require("lodash.mergewith");
function arrayConcat(objVal, srcVal) {
    if (objVal instanceof Array) {
        return Array.from(new Set(objVal.concat(srcVal)));
    }
    ;
}
;
const sep = path.sep;
const mochaOptsFileName = 'mocha.opts';
const tsConfigFileName = 'tsconfig.json';
const iniCWD = process.env.INIT_CWD;
const curDir = __dirname;
const packageFilePath = path.normalize(`${iniCWD}${sep}package.json`);
const tsConfigFilePath = path.normalize(`${iniCWD}${sep}${tsConfigFileName}`);
const mochaOptsFilePath = path.normalize(`${iniCWD}${sep}${mochaOptsFileName}`);
const mochaOptsTemplateFilePath = path.normalize(`${curDir}${sep}${mochaOptsFileName}`);
const npmScripts = {
    scripts: {
        test: `mocha --opts ./${mochaOptsFileName}`,
        "test-watch": `mocha  --opts ./${mochaOptsFileName} --watch --watch-extensions ts tsx`,
    }
};
const tsConfigAppend = {
    exclude: [
        "src/**/*.test.ts"
    ]
};
(() => __awaiter(this, void 0, void 0, function* () {
    const packageJSON = yield new Promise((resolve, reject) => {
        fs.readFile(packageFilePath, (err, packageJSON) => {
            if (err) {
                return reject(err);
            }
            ;
            resolve(JSON.parse(packageJSON.toString()));
        });
    });
    const tsConfig = yield new Promise((resolve, reject) => {
        fs.readFile(tsConfigFilePath, (err, tsConfig) => {
            if (err) {
                return resolve({});
            }
            ;
            resolve(JSON.parse(tsConfig.toString()));
        });
    });
    /*const hasMochaOpts = await new Promise<boolean>((resolve, reject)=>{
  
      fs.open(path.normalize(mochaOptsFilePath),'r',(err)=>{
  
        resolve(err === null);
  
      });
  
    });*/
    const curMochaOpts = yield new Promise((resolve, reject) => {
        const curMochaOpts = new Set();
        /* if(!hasMochaOpts){
     
           return resolve(curMochaOpts);
     
         };
     */
        let errorHandled = false;
        const handleError = (err) => {
            if (errorHandled) {
                return;
            }
            ;
            errorHandled = true;
            return curMochaOpts.size === 0 ? resolve(curMochaOpts) : reject(err);
        };
        const readable = fs.createReadStream(mochaOptsFilePath);
        readable.on('error', handleError);
        const rl = readline.createInterface({
            input: readable,
        });
        rl
            .on('line', (line) => curMochaOpts.add(line.trim()))
            .on('close', () => resolve(curMochaOpts))
            .on('error', handleError);
    });
    //Backup cur mochaOpts
    if (curMochaOpts.size > 0) {
        yield new Promise((resolve, reject) => {
            fs.copyFile(mochaOptsFilePath, path.normalize(`${iniCWD}${sep}.${mochaOptsFileName}.BAK`), (err) => err === null ? resolve() : reject(err));
        });
    }
    ;
    const mochaOptsTemplate = yield new Promise((resolve, reject) => {
        const mochaOptsTemplate = new Set();
        let errorHandled = false;
        const handleError = (err) => {
            if (errorHandled) {
                return;
            }
            ;
            errorHandled = true;
            return reject(err);
        };
        const readable = fs.createReadStream(mochaOptsTemplateFilePath);
        readable.on('error', handleError);
        const rl = readline.createInterface({
            input: readable,
        });
        rl
            .on('line', (line) => mochaOptsTemplate.add(line.trim()))
            .on('close', () => resolve(mochaOptsTemplate))
            .on('error', handleError);
    });
    //Merge mocha opts
    const newMochaOpts = new Set();
    const curMochaOptIter = curMochaOpts.values();
    let { value: curMochaOpt, done } = curMochaOptIter.next();
    for (const mochaOpt of mochaOptsTemplate) {
        if (!curMochaOpts.has(mochaOpt)) {
            newMochaOpts.add(mochaOpt);
        }
        ;
        if (!done) {
            newMochaOpts.add(curMochaOpt);
            let reuslt = curMochaOptIter.next();
            curMochaOpt = reuslt.value;
            done = reuslt.done;
        }
        ;
    }
    ;
    while (!done) {
        newMochaOpts.add(curMochaOpt);
        let reuslt = curMochaOptIter.next();
        curMochaOpt = reuslt.value;
        done = reuslt.done;
    }
    ;
    //update mochaopts
    yield new Promise((resolve, reject) => {
        fs.writeFile(mochaOptsFilePath, Array.from(newMochaOpts).join('\n'), (err) => err === null ? resolve() : reject(err));
    });
    //backup package.json
    yield new Promise((resolve, reject) => {
        fs.copyFile(packageFilePath, path.normalize(`${iniCWD}${sep}.package.json.BAK`), (err) => err === null ? resolve() : reject(err));
    });
    //Update package.json
    yield new Promise((resolve, reject) => {
        fs.writeFile(packageFilePath, JSON.stringify(mergewith(packageJSON, npmScripts, arrayConcat), null, 2), (err) => err === null ? resolve() : reject(err));
    });
    //backup tsconfig.json
    if (Object.keys(tsConfig).length > 0) {
        yield new Promise((resolve, reject) => {
            fs.copyFile(tsConfigFilePath, path.normalize(`${iniCWD}${sep}.tsconfig.json.BAK`), (err) => err === null ? resolve() : reject(err));
        });
    }
    ;
    //Update tsconfig.json
    yield new Promise((resolve, reject) => {
        fs.writeFile(tsConfigFilePath, JSON.stringify(mergewith(tsConfig, tsConfigAppend, arrayConcat), null, 2), (err) => err === null ? resolve() : reject(err));
    });
}))().catch((err) => console.error(err));
//# sourceMappingURL=data:application/json;base64,